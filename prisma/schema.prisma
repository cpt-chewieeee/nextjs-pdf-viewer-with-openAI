// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma" // comment this out if you want to have generate files in node_modules/.bin/.prisma/client
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model UserAccount {
  @@map("user_accounts")

  id String @id @default(cuid())
  userId String @map("user_id")

  refreshToken String? @map("refresh_token")
  accessToken String? @map("access_token")
  expiresAt String? @map("expires_at")
  tokenType String? @map("token_type")
  idToken String? @map("id_token")
  session_state String? @map("session_state")

  oauthTokenSecret String? @map("oauth_token_secret")
  oauthToken String? @map("oauth_token")
  oauthProvider String @map("oauth_provider")
  oauthProviderId String @map("oauth_provider_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([oauthProvider, oauthProviderId])

}

model Session {
  @@map("sessions")

  id String @id @default(cuid())
  sessionToken String @unique @map("session_token")
  userId String @map("user_id")
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}


model User {
  id String @default(cuid()) @id
  name String?
  email String? @unique
  emailVerified DateTime? @map("email_verified")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user_accounts UserAccount[]
  sessions Session[]

  @@map(name: "users")
}


model Token {
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
  @@map("tokens")
}